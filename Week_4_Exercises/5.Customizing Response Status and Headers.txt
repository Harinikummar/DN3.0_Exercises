Exercise 5: Online Bookstore - Customizing Response Status and Headers

1. Response Status:

BookController:

package com.example.BookstoreAPI.controller;

import com.example.BookstoreAPI.exception.BookNotFoundException;
import com.example.BookstoreAPI.model.Book;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/books")
public class BookController {

    private List<Book> bookList = new ArrayList<>();

    // GET all books
    @GetMapping
    public List<Book> getAllBooks() {
        return bookList;
    }

    // GET a book by ID
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public Book getBookById(@PathVariable Long id) {
        return bookList.stream()
                .filter(book -> book.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new BookNotFoundException(id));
    }

    // POST to create a new book
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Book createBook(@RequestBody Book book) {
        bookList.add(book);
        return book;
    }

    // PUT to update an existing book
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public Book updateBook(@PathVariable Long id, @RequestBody Book updatedBook) {
        return bookList.stream()
                .filter(book -> book.getId().equals(id))
                .findFirst()
                .map(existingBook -> {
                    existingBook.setTitle(updatedBook.getTitle());
                    existingBook.setAuthor(updatedBook.getAuthor());
                    existingBook.setPrice(updatedBook.getPrice());
                    existingBook.setIsbn(updatedBook.getIsbn());
                    return existingBook;
                })
                .orElseThrow(() -> new BookNotFoundException(id));
    }

    // DELETE a book by ID
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteBook(@PathVariable Long id) {
        boolean removed = bookList.removeIf(book -> book.getId().equals(id));
        if (!removed) {
            throw new BookNotFoundException(id);
        }
    }
}


BookNotFoundException:

package com.example.bookstoreapi.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class BookNotFoundException extends RuntimeException {
    public BookNotFoundException(Long id) {
        super("Book with ID " + id + " not found.");
    }
}


2.Custom Headers:

BookController:

package com.example.bookstoreapi.controller;

import com.example.bookstoreapi.model.Book;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/books")
public class BookController {

    private List<Book> bookList = new ArrayList<>();

    // GET a book by ID with custom headers
    @GetMapping("/{id}/custom-header")
    public ResponseEntity<Book> getBookByIdWithHeaders(@PathVariable Long id) {
        Optional<Book> book = bookList.stream()
                                      .filter(b -> b.getId().equals(id))
                                      .findFirst();

        if (book.isPresent()) {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Custom-Header", "This is a custom header value");
            return new ResponseEntity<>(book.get(), headers, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // POST to create a new book with custom headers
    @PostMapping("/custom-header")
    public ResponseEntity<Book> createBookWithHeaders(@RequestBody Book book) {
        bookList.add(book);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Custom-Header", "Book created successfully");
        return new ResponseEntity<>(book, headers, HttpStatus.CREATED);
    }
}
