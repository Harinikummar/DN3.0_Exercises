Exercise 1: Inventory Management System

1. Explain why data structures and algorithms are essential in handling large inventories.

(i)Speed:
Quick Access: Fast retrieval of items.
Fast Updates: Quick addition and modification of items.

(ii)Efficiency:
Saving Space: Optimizes memory usage.
Optimized Operations: Efficient searching, sorting, and updating.

(iii)Reliability:
Accurate Results: Ensures fast and accurate information.
Consistent Performance: Provides reliable operation under various conditions.


2. Discuss the types of data structures suitable for this problem.

(i)ArrayList:
Good for storing items in a list where you need to access them by index.
Easy to use and supports dynamic resizing.

(ii)TreeMap:
Useful if you need items sorted by their IDs or another key.
Keeps items in order and allows for fast searching and updating.

(iii)HashMap:
Ideal for quick search using unique IDs (like product IDs).
Fast access, addition, and deletion of items.


3. Analyze the time complexity of each operation (add, update, delete) in your chosen data structure.

Choosen data Structure is HashMap. 

(i) Add Operation:
Time Complexity: O(1)
Explanation: Adding a new item to a HashMap is very fast because it uses a hash function to determine where to store the item.

(ii)Update Operation:
Time Complexity: O(1)
Explanation: Updating an item is quick since it can directly access the location where the item is stored using its key.

(iii)Delete Operation:
Time Complexity: O(1)
Explanation: Deleting an item is efficient because it can quickly find the item using its key and remove it.


4. Discuss how you can optimize these operations.

(i)Adjust Capacity:
Explanation: Set an appropriate initial capacity and load factor to reduce the need for resizing and rehashing, which improves performance.

(ii)Use Good Hash Functions:
Explanation: Choose or implement a good hash function to evenly distribute items and minimize collisions, making access faster.

(iii)Handle Collisions Efficiently:
Explanation: Implement effective collision handling techniques, like chaining (linked lists) or open addressing, to keep operations quick even when collisions occur.

(iv)Resize When Necessary:
Explanation: Automatically resize the HashMap when it gets too full to maintain performance, balancing between memory usage and speed.