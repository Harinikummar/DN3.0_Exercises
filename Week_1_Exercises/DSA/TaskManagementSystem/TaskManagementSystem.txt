Task Management System

1. Explain the different types of linked lists (Singly Linked List, Doubly Linked List).

Singly Linked List:
Each node has one link pointing to the next node.
Allows traversal in one direction, from the first node to the last.
Simple and uses less memory compared to doubly linked lists.

Doubly Linked List:
Each node has two links: one pointing to the next node and one pointing to the previous node.
Allows traversal in both directions, from the first node to the last and vice versa.
More flexible for insertion and deletion operations but uses more memory.


2. Analyze the time complexity of each operation.

(i)Adding a task:
Average Case: O(n)
Worst Case: O(n)
Explanation: You need to traverse to the end of the list to add a new task, where n is the number of tasks.

(ii)Searching for a task:
Average Case: O(n)
Worst Case: O(n)
Explanation: You may need to look through the entire list to find the task.

(iii)Traversing the list:
Average Case: O(n)
Worst Case: O(n)
Explanation: You have to visit each task to traverse the list.

(iv)Deleting a task:
Average Case: O(n)
Worst Case: O(n)
Explanation: You may need to look through the entire list to find and delete the task.


3. Discuss the advantages of linked lists over arrays for dynamic data.

Dynamic Size:
Linked lists can easily grow and shrink as needed. Arrays have a fixed size, so resizing can be difficult and inefficient.

Efficient Insertions/Deletions:
In linked lists, adding or removing elements is easy and quick since you only need to update pointers. In arrays, you often need to shift elements, which takes more time.

Memory Utilization:
Linked lists use memory more efficiently for dynamic data because they don't need a large block of continuous memory. Arrays require a fixed block of memory, which can be wasteful if not fully used.